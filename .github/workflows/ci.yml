name: CI

# Simplified CI focused on essential validations:
# 1. Comprehensive test suite across Ruby/Rails versions (7.1, 7.2, 8.0)
# 2. Performance testing and memory usage verification
# 3. Automated version management and RubyGems release
# This ensures core functionality and performance without
# overwhelming complexity in the CI pipeline.

on:
  push:
    branches: [main, develop]
    tags: ['v*']  # Trigger release on version tags
  pull_request:
    branches: [main, develop]

jobs:
  lint:
    name: RuboCop (style/lint)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby-version: ["3.3"]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: false
      - name: Cache gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ matrix.ruby-version }}-${{ hashFiles('**/Gemfile.lock', '**/thumbsy.gemspec') }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ matrix.ruby-version }}-
      - name: Install dependencies (Ruby ${{ matrix.ruby-version }})
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3
      - name: Run RuboCop (style/lint)
        run: |
          echo "🔎 Running RuboCop..."
          bundle exec rubocop --parallel --fail-level warning

  test:
    name: "Ruby ${{ matrix.ruby-version }} / Rails ${{ matrix.rails-version }}"
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      fail-fast: false
      matrix:
        ruby-version:
          - "3.3"
          - "3.4"
        rails-version:
          - "7.1"
          - "7.2"
          - "8.0"
        # Ruby/Rails compatibility:
        # Rails 8.0: Ruby 3.2+ (all our Ruby versions supported)
        # Rails 7.2: Ruby 3.1+ (all our Ruby versions supported)
        # Rails 7.1: Ruby 2.7+ (all our Ruby versions supported)
        # Total combinations: 9 (3 Ruby × 3 Rails versions)

    env:
      RAILS_VERSION: ${{ matrix.rails-version }}
      BUNDLE_GEMFILE: ${{ github.workspace }}/Gemfile

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby ${{ matrix.ruby-version }}
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby-version }}
          bundler-cache: false

      - name: Cache gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-${{ matrix.ruby-version }}-${{ matrix.rails-version }}-${{ hashFiles('**/Gemfile.lock', '**/thumbsy.gemspec') }}
          restore-keys: |
            ${{ runner.os }}-gems-${{ matrix.ruby-version }}-${{ matrix.rails-version }}-
            ${{ runner.os }}-gems-${{ matrix.ruby-version }}-
            ${{ runner.os }}-gems-

      - name: Install dependencies (Ruby ${{ matrix.ruby-version }} / Rails ${{ matrix.rails-version }})
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Run test suite with coverage
        run: |
          mkdir -p tmp
          echo "🧪 Running Thumbsy test suite..."
          echo "Ruby: ${{ matrix.ruby-version }}, Rails: ${{ matrix.rails-version }}"
          COVERAGE=true bundle exec rspec --format progress --format RspecJunitFormatter --out tmp/rspec.xml

      - name: Upload test results and coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-ruby-${{ matrix.ruby-version }}-rails-${{ matrix.rails-version }}
          path: tmp/rspec.xml

  release:
    name: "Release to RubyGems"
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for conventional commits

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.3"
          bundler-cache: false

      - name: Cache gems
        uses: actions/cache@v4
        with:
          path: vendor/bundle
          key: ${{ runner.os }}-gems-3.3-${{ hashFiles('**/Gemfile.lock', '**/thumbsy.gemspec') }}
          restore-keys: |
            ${{ runner.os }}-gems-3.3-

      - name: Install dependencies
        run: |
          gem install bundler
          bundle config path vendor/bundle
          bundle install --jobs 4 --retry 3

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "📦 Releasing version: $VERSION"

      - name: Update version files
        run: |
          VERSION=${{ steps.version.outputs.version }}
          echo "🔄 Updating version files to $VERSION"

          # Update lib/thumbsy/version.rb
          sed -i "s/VERSION = \".*\"/VERSION = \"$VERSION\"/" lib/thumbsy/version.rb

          # Update thumbsy.gemspec
          sed -i "s/spec\.version       = \".*\"/spec.version       = \"$VERSION\"/" thumbsy.gemspec

          echo "✅ Version files updated"

      - name: Build gem
        run: |
          echo "🔨 Building gem package..."
          gem build thumbsy.gemspec
          ls -la *.gem

      - name: Publish to RubyGems
        env:
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
          echo "🚀 Publishing to RubyGems..."
          echo "🔑 API Key present: ${{ secrets.RUBYGEMS_API_KEY != '' }}"

          if [ -z "$RUBYGEMS_API_KEY" ]; then
            echo "❌ RUBYGEMS_API_KEY is not set or empty"
            echo "Please add RUBYGEMS_API_KEY to your repository secrets"
            exit 1
          fi

          # Try multiple authentication methods
          echo "🔑 Attempting to push with API key..."

          # Method 1: Use --key flag
          if gem push --key "$RUBYGEMS_API_KEY" *.gem; then
            echo "✅ Successfully pushed with --key flag"
          else
            echo "⚠️ --key flag failed, trying credentials file..."

            # Method 2: Create credentials file
            mkdir -p ~/.gem
            cat > ~/.gem/credentials << EOF
          ---
          :rubygems_api_key: $RUBYGEMS_API_KEY
          EOF
            chmod 600 ~/.gem/credentials

            echo "🔑 Credentials file created, attempting to push..."
            gem push *.gem
          fi

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## What's Changed

            This release includes all changes since the last version.

            ### 🔧 Technical Details
            - Version: ${{ steps.version.outputs.version }}
            - Ruby: 3.3+
            - Rails: 7.0+

            ### 📦 Installation

            ```bash
            gem install thumbsy
            ```

            Or add to your Gemfile:

            ```ruby
            gem 'thumbsy'
            ```

            ### 📚 Documentation

            - [API Guide](https://github.com/healthhive/thumbsy/blob/main/docs/api-guide.md)
            - [Architecture Guide](https://github.com/healthhive/thumbsy/blob/main/docs/architecture-guide.md)

            ### 🐛 Issues & Support

            If you encounter any issues, please [open an issue](https://github.com/healthhive/thumbsy/issues).
          draft: false
          prerelease: false
